import asyncio
from random import randint

import google
import grpclib
from grpclib.utils import graceful_exit
from grpclib.server import Server

# generated by protoc grpclib
import grpclib_way.api_pb2 as api_pb2
from grpclib_way.api_pb2 import ChallengeRequest, ChallengeResponse
from grpclib_way.api_grpc import ChallengeBase


class Challenge(ChallengeBase):

    async def create(self, stream: grpclib.server.Stream[api_pb2.ChallengeRequest, api_pb2.ChallengeResponse]) -> None:
        challenge_request: ChallengeRequest = await stream.recv_message()
        await stream.send_message(ChallengeResponse(id=randint(0, 100), name=challenge_request.name))

    async def bulk_create(self, stream: grpclib.server.Stream[api_pb2.ChallengeRequest, api_pb2.ChallengeResponse]) -> None:
        async for challenge_request in stream:
            await stream.send_message(ChallengeResponse(id=randint(0, 100), name=challenge_request.name))

    async def list(self, stream: grpclib.server.Stream[google.protobuf.empty_pb2.Empty, api_pb2.ChallengeResponse]) -> None:
        for i in range(10):
            await stream.send_message(ChallengeResponse(id=randint(0, 100), name=f'({i}) Holly'))
            await asyncio.sleep(1)
        await asyncio.sleep(100)
        await stream.send_message(ChallengeResponse(id=randint(0, 100), name=f'(final) Holly'))


async def main(*, host='127.0.0.1', port=50051):
    server = Server([Challenge()])
    with graceful_exit([server]):
        await server.start(host, port)
        print(f'Serving on {host}:{port}')
        await server.wait_closed()


if __name__ == '__main__':
    asyncio.run(main())
