import asyncio
from random import randint

from typing import AsyncGenerator

import google
from google.protobuf.empty_pb2 import Empty
from purerpc import Server

# generated by protoc pureprc
from purerpc_way.api_pb2 import ChallengeRequest, ChallengeResponse
from purerpc_way.api_grpc import ChallengeServicer


class Challenge(ChallengeServicer):

    async def create(self, input_message: ChallengeRequest) -> None:
        return ChallengeResponse(id=randint(0, 100), name=input_message.name)

    async def bulk_create(self, input_messages: AsyncGenerator[ChallengeRequest, None]):
        async for challenge in input_messages:
            yield ChallengeResponse(id=randint(0, 100), name=challenge.name)

    async def list(self, input_message: Empty):
        for i in range(10):
            yield ChallengeResponse(id=randint(0, 100), name=f'({i}) List')
            await asyncio.sleep(1)
        await asyncio.sleep(100)
        yield ChallengeResponse(id=randint(0, 100), name=f'(final) List')



if __name__ == '__main__':
    port = 50051
    server = Server(port)
    server.add_service(Challenge().service)
    print(f'Serving on {port}')
    server.serve(backend="asyncio")
